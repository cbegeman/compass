import time

import gsw
import numpy as np
import pandas as pd
import xarray
from mpas_tools.io import write_netcdf
from mpas_tools.mesh.conversion import convert, cull
from mpas_tools.planar_hex import make_planar_hex_mesh
from scipy.interpolate import interp1d

from compass.ocean.vertical import init_vertical_coord
from compass.step import Step


class InitialState(Step):
    """
    A step for creating a mesh and initial condition for the
    arctic channel test case
    """
    def __init__(self, test_case):
        """
        Create the step

        Parameters
        ----------
        test_case : compass.TestCase
        """
        super().__init__(test_case=test_case, name='initial_state')

        self.add_input_file(filename='itp77.csv', target='itp77.csv',
                            database='mixed_layer_restrat')

        for file in ['base_mesh.nc', 'culled_mesh.nc', 'culled_graph.info',
                     'initial_state.nc']:
            self.add_output_file(file)

    def run(self):
        """
        Run this step of the test case
        """
        config = self.config
        logger = self.logger

        timeStart = time.time()

        section = config['horizontal_grid']
        nx = section.getint('nx')
        ny = section.getint('ny')
        dc = section.getfloat('dc')

        dsMesh = make_planar_hex_mesh(nx=nx, ny=ny, dc=dc, nonperiodic_x=True,
                                      nonperiodic_y=False)
        write_netcdf(dsMesh, 'base_mesh.nc')

        dsMesh = cull(dsMesh, logger=logger)
        dsMesh = convert(dsMesh, graphInfoFileName='culled_graph.info',
                         logger=logger)
        write_netcdf(dsMesh, 'culled_mesh.nc')

        section = config['vertical_grid']
        maxDepth = section.getfloat('bottom_depth')
        nVertLevels = section.getint('vert_levels')

        section = config['arctic_channel']
        linear_Tref = section.getfloat('eos_linear_Tref')
        linear_Sref = section.getfloat('eos_linear_Sref')
        linear_densityref = section.getfloat(
            'eos_linear_densityref')
        deltaT = section.getfloat('deltaT')
        deltaS = section.getfloat('deltaS')
        zm = section.getfloat('zm')
        deltaH = section.getfloat('deltaH')

        # comment('obtain dimensions and mesh variables')
        # vertical_coordinate = 'uniform'

        ds = dsMesh.copy()
        nCells = ds.nCells.size
        nEdges = ds.nEdges.size
        nVertices = ds.nVertices.size

        xCell = ds.xCell
        angleEdge = ds.angleEdge.values
        cellsOnEdge = ds.cellsOnEdge.values

        # comment('create and initialize variables')
        time1 = time.time()

        ds['bottomDepth'] = maxDepth * xarray.ones_like(xCell)
        ds['ssh'] = xarray.zeros_like(xCell)

        init_vertical_coord(config, ds)

        # alpha, beta
        alpha = linear_densityref * gsw.alpha(linear_Sref, linear_Tref, 10.0)
        beta = linear_densityref * gsw.beta(linear_Sref, linear_Tref, 10.0)

        # initial salinity, density, temperature
        A = [[-4.948222523022899, 5.0, -1.437806175089878, 26.67854069959807],
             [-5.937852611279636, 6.0, -1.5478020086566358, 29.011356488207525],
             [-6.927477894433156, 7.0, -1.46490645347742, 28.549505894772437],
             [-7.91709837263176, 8.0, -1.4413576689572247, 28.35066163267242],
             [-8.906714046023751, 9.0, -1.436099556930728, 28.339148117681948],
             [-9.89632491475742, 10.0, -1.4320730715412155, 28.32312392100366],
             [-10.88593097898106, 11.0, -1.427693514867454, 28.312623372179907],
             [-11.87553223884296, 12.0, -1.4259221250910064, 28.31691614401466],
             [-12.8651286944914, 13.0, -1.4227943402884482, 28.318436629822312],
             [-13.854720346074659, 14.0, -1.4184457315595607, 28.319580087670804],
             [-14.844307193741013, 15.0, -1.4146874666142868, 28.331702262426568],
             [-15.833889237638731, 16.0, -1.410202879602864, 28.357625038966425],
             [-16.82346647791608, 17.0, -1.4033865714825853, 28.373624788058013],
             [-17.81303891472132, 18.0, -1.3972410232574712, 28.40360558391211],
             [-18.802606548202707, 19.0, -1.3928436551338415, 28.439643721377166],
             [-19.792169378508504, 20.0, -1.3888714729643366, 28.474756148230515],
             [-20.78172740578695, 21.0, -1.3853502142249456, 28.506303940511295],
             [-21.771280630186286, 22.0, -1.3812159426457087, 28.54023176935449],
             [-22.760829051854756, 23.0, -1.3756191897635377, 28.579535814673733],
             [-23.75037267094061, 24.0, -1.3728294829136136, 28.622531314336264],
             [-24.73991148759207, 25.0, -1.3704218388475116, 28.659974408037623],
             [-25.729445501957365, 26.0, -1.3697031280407441, 28.700155575314334],
             [-26.718974714184704, 27.0, -1.3674832434822628, 28.73391047930385],
             [-27.708499124422335, 28.0, -1.364949324689347, 28.767966602818795],
             [-28.69801873281845, 29.0, -1.3649671585232603, 28.792764817880485],
             [-29.687533539521265, 30.0, -1.3659159203616575, 28.813595992752955],
             [-30.677043544678998, 31.0, -1.3675181498943663, 28.833550812818732],
             [-31.666548748439848, 32.0, -1.367708232357597, 28.853573299148607],
             [-32.65604915095199, 33.0, -1.3669617784016226, 28.87467868267462],
             [-33.64554475236366, 34.0, -1.3645606098280134, 28.89504880047037],
             [-34.63503555282301, 35.0, -1.361855717752036, 28.917330392582457],
             [-35.62452155247826, 36.0, -1.3576221412732477, 28.941975979267244],
             [-36.61400275147756, 37.0, -1.35409448597491, 28.970236581063556],
             [-37.603479149969104, 38.0, -1.3452858433536052, 29.0019564584012],
             [-38.59295074810106, 39.0, -1.3299892625087621, 29.041823592047106],
             [-39.58241754602161, 40.0, -1.3066380061514358, 29.09253716754603],
             [-40.5718795438789, 41.0, -1.2747266748232093, 29.15435320729484],
             [-41.5613367418211, 42.0, -1.2299977277308491, 29.229801314287354],
             [-42.550789139996354, 43.0, -1.1670064888546732, 29.32650170549291],
             [-43.54023673855284, 44.0, -1.0777211276211354, 29.454957784616955],
             [-44.52967953763868, 45.0, -0.9615229842130508, 29.615726840592497],
             [-45.51911753740204, 46.0, -0.8293172479462243, 29.795913994686362],
             [-46.50855073799103, 47.0, -0.7056317942143879, 29.962134389568142],
             [-47.49797913955382, 48.0, -0.6069321859467863, 30.100307801867753],
             [-48.48740274223852, 49.0, -0.5275421555637828, 30.22789708512742],
             [-49.47682154619326, 50.0, -0.46270734140223285, 30.343407727806426],
             [-50.46623555156615, 51.0, -0.407906592394251, 30.44615732584559],
             [-51.45564475850535, 52.0, -0.363057111340178, 30.539613680029774],
             [-52.44504916715893, 53.0, -0.32614013025274147, 30.62690171141118],
             [-53.43444877767501, 54.0, -0.29675564489202677, 30.705498484604533],
             [-54.42384359020171, 55.0, -0.2734280857680296, 30.778658412331502],
             [-55.41323360488712, 56.0, -0.2547262923795878, 30.848649024812467],
             [-56.402618821879344, 57.0, -0.23750615818229537, 30.914741375057993],
             [-57.39199924132648, 58.0, -0.22693312152428938, 30.977997019954238],
             [-58.38137486337659, 59.0, -0.22244143844285927, 31.03797392735092],
             [-59.3707456881778, 60.0, -0.22169788583133737, 31.09378099137284],
             [-60.360111715878155, 61.0, -0.22372725743623165, 31.147796091617618],
             [-61.349472946625745, 62.0, -0.2339668896061467, 31.198399463917436],
             [-62.33882938056865, 63.0, -0.2476726892699068, 31.246921712987398],
             [-63.32818101785491, 64.0, -0.2624283618498465, 31.292916863542285],
             [-64.31752785863263, 65.0, -0.28042025143506694, 31.336738167795673],
             [-65.30686990304983, 66.0, -0.30268794542075544, 31.379085807675008],
             [-66.29620715125458, 67.0, -0.32692887054653313, 31.420447282921508],
             [-67.28553960339495, 68.0, -0.35074862861829587, 31.45981458902477],
             [-68.27486725961897, 69.0, -0.3756801687423726, 31.49715194372665],
             [-69.26419012007466, 70.0, -0.4018260422995884, 31.534146677978843],
             [-70.2535081849101, 71.0, -0.4293618661246942, 31.570129140396958],
             [-71.24282145427328, 72.0, -0.45631071242948995, 31.60413971769036],
             [-72.23212992831228, 73.0, -0.4828777246115181, 31.637518077942147],
             [-73.2214336071751, 74.0, -0.5088646233430547, 31.669506962254182],
             [-74.21073249100975, 75.0, -0.534951801013535, 31.701154676958495],
             [-75.20002657996426, 76.0, -0.5609155920499019, 31.73215982188117],
             [-76.18931587418666, 77.0, -0.5862993481963041, 31.761798151864493],
             [-77.1786003738249, 78.0, -0.6115780894125349, 31.791075461544903],
             [-78.16788007902707, 79.0, -0.636886687629018, 31.81994373840245],
             [-79.1571549899411, 80.0, -0.6619381613891999, 31.84794605320059],
             [-80.14642510671501, 81.0, -0.6857557254397245, 31.874905614704637],
             [-81.13569042949685, 82.0, -0.7087973012826752, 31.901166628016654],
             [-82.12495095843448, 83.0, -0.731562051975035, 31.92686330741962],
             [-83.114206693676, 84.0, -0.7542120894941432, 31.95154370885565],
             [-84.10345763536931, 85.0, -0.7769338432966104, 31.975539530823518],
             [-85.09270378366242, 86.0, -0.7990911663582566, 31.998962545962012],
             [-86.08194513870333, 87.0, -0.8211099277254308, 32.02155620022859],
             [-87.07118170063994, 88.0, -0.8427680213830129, 32.04366876307982],
             [-88.06041346962026, 89.0, -0.864100516146359, 32.065071201351245],
             [-89.04964044579225, 90.0, -0.8850822719097354, 32.085637856961796],
             [-90.03886262930385, 91.0, -0.9047104713169313, 32.105820134191354],
             [-91.028080020303, 92.0, -0.9236453115049835, 32.125074749746744],
             [-92.01729261893767, 93.0, -0.9425856740380988, 32.1439065552229],
             [-93.00650042535578, 94.0, -0.9616112899949355, 32.16270779145783],
             [-93.99570343970527, 95.0, -0.9807095781599843, 32.18063251383198],
             [-94.98490166213408, 96.0, -0.9994546554978498, 32.19801503814809],
             [-95.97409509279011, 97.0, -1.017036961320676, 32.21491894577775],
             [-96.96328373182135, 98.0, -1.0336390299649996, 32.23152981447727],
             [-97.95246757937569, 99.0, -1.0495717020679507, 32.24750426527661],
             [-98.941646635601, 100.0, -1.064902959183615, 32.26299717451442],
             [-99.93082090064524, 101.0, -1.0798563713648017, 32.278067182175654],
             [-100.9199903746563, 102.0, -1.0942422695283656, 32.29284784264491],
             [-101.9091550577821, 103.0, -1.108586780255584, 32.307404504253974],
             [-102.89831495017054, 104.0, -1.1218840643809254, 32.321563405030545],
             [-103.88747005196944, 105.0, -1.1345032779149336, 32.335230070848766],
             [-104.8766203633268, 106.0, -1.146989257792983, 32.34873485820554],
             [-105.86576588439047, 107.0, -1.1594986209401865, 32.36221721637904],
             [-106.8549066153083, 108.0, -1.171421628673161, 32.375431295946896],
             [-107.84404255622822, 109.0, -1.1826051813579066, 32.3883598652289],
             [-108.83317370729803, 110.0, -1.1934528895944594, 32.400885802050844],
             [-109.8223000686657, 111.0, -1.2038700001097986, 32.41317655663581],
             [-110.811421640479, 112.0, -1.2132582284160005, 32.42509690397451],
             [-111.80053842288584, 113.0, -1.2220534536418777, 32.43699665793656],
             [-112.78965041603405, 114.0, -1.2306177055355882, 32.448751365958586],
             [-113.77875762007149, 115.0, -1.2383693347091234, 32.46045740998569],
             [-114.76786003514606, 116.0, -1.245603028019096, 32.47192309372675],
             [-115.75695766140555, 117.0, -1.2523908312250343, 32.4834392522954],
             [-116.74605049899777, 118.0, -1.2589730207835663, 32.494844340522754],
             [-117.73513854807065, 119.0, -1.2649294531186626, 32.50627924479455],
             [-118.72422180877197, 120.0, -1.2706924044451546, 32.51764440841205],
             [-119.71330028124953, 121.0, -1.276121541112368, 32.52874179030931],
             [-120.70237396565119, 122.0, -1.2810439297870666, 32.539816911796244],
             [-121.69144286212476, 123.0, -1.2861814631674757, 32.550889386803256],
             [-122.68050697081804, 124.0, -1.2911082748746276, 32.561886417662095],
             [-123.66956629187885, 125.0, -1.2954528380917876, 32.57293120591985],
             [-124.65862082545505, 126.0, -1.2990974915586848, 32.58398311637014],
             [-125.64767057169432, 127.0, -1.3027514916369505, 32.595034191334854],
             [-126.63671553074458, 128.0, -1.3062378891753177, 32.60577156524671],
             [-127.62575570275358, 129.0, -1.3098251692170761, 32.61666726364909],
             [-128.6147910878691, 130.0, -1.3133929216939613, 32.62741928525934],
             [-129.60382168623886, 131.0, -1.3167447795685034, 32.638238178312754],
             [-130.59284749801077, 132.0, -1.3199771460919618, 32.64894514799757],
             [-131.58186852333253, 133.0, -1.3227764100353252, 32.659556823489716],
             [-132.57088476235197, 134.0, -1.3253470927411382, 32.670331564596815],
             [-133.55989621521678, 135.0, -1.3282661967235116, 32.68108928538801],
             [-134.54890288207477, 136.0, -1.3312434378115892, 32.69177820123917],
             [-135.53790476307364, 137.0, -1.3338905058400674, 32.70228472811806],
             [-136.52690185836127, 138.0, -1.3367495203122868, 32.712935060173],
             [-137.5158941680853, 139.0, -1.3395916387383031, 32.723584634050674],
             [-138.50488169239352, 140.0, -1.3425981439784662, 32.734233184073304],
             [-139.49386443143365, 141.0, -1.3456732399673603, 32.74479399964309],
             [-140.4828423853535, 142.0, -1.3487810066446626, 32.75512726403665],
             [-141.4718155543007, 143.0, -1.351917294082963, 32.76577520455069],
             [-142.46078393842308, 144.0, -1.3550717460106392, 32.77639989864251],
             [-143.44974753786826, 145.0, -1.358192767334885, 32.78678517872567],
             [-144.43870635278404, 146.0, -1.361192100608831, 32.797273924792556],
             [-145.42766038331808, 147.0, -1.364102602534287, 32.80784937403959],
             [-146.4166096296182, 148.0, -1.3671109829991706, 32.81830165419563],
             [-147.405554091832, 149.0, -1.3701946309048059, 32.828792004691415],
             [-148.39449377010723, 150.0, -1.3733712543285663, 32.8392538436087],
             [-149.38342866459155, 151.0, -1.3765541131588488, 32.84975308987753],
             [-150.37235877543276, 152.0, -1.3799777152066421, 32.86025114721338],
             [-151.36128410277843, 153.0, -1.383397844834255, 32.87079495025499]]

        data = pd.read_csv('itp77.csv', header=0, names=['z', 'p', 'pt', 'sa'])

        ds['S_itp77'] = xarray.ones_like(ds.refZMid)
        S_itp77 = ds['S_itp77']
        z_itp = data.z.to_numpy()
        z_itp = np.insert(z_itp, 0, 0)
        pt_itp = data.pt.to_numpy()
        pt_itp = np.insert(pt_itp, 0, pt_itp[0])
        sa_itp = data.sa.to_numpy()
        sa_itp = np.insert(sa_itp, 0, sa_itp[0])
        f = interp1d(z_itp, pt_itp)
        T_itp77 = f(ds.refZMid.values)
        f = interp1d(z_itp, sa_itp)
        S_itp77[:] = f(ds.refZMid.values)

        deltaSy = \
            (0.001 * deltaS) / beta + \
            gsw.alpha_on_beta(linear_Sref, linear_Tref, 10.0) * deltaT
        print(gsw.alpha_on_beta(linear_Sref, linear_Tref, 10.0))
        print(deltaSy)
        deltaSz = 0.5 * deltaSy
        deltaTz = 0.5 * deltaT
        B = 2.0 * np.pi * ny * dc
        ds['Y'] = xarray.zeros_like(xCell)
        Y = ds['Y']
        Y[:] = np.sin((ds.yCell - 0.5 * ny * dc) / B)
        Z = 0.5 * (1 + np.tanh((ds.refZMid + zm) / deltaH))
        ds['temperature'] = xarray.ones_like(ds.zMid).where(ds.cellMask)
        temperature = ds['temperature']
        ds['salinity'] = xarray.ones_like(ds.zMid).where(ds.cellMask)
        salinity = ds['salinity']
        count = 0
        for k in range(0, nVertLevels):
            # if (ds.refZMid[k] < zm):
            if (-ds.refZMid[k] < zm):
                count = count + 1
                temperature[0, :, k] = \
                    Z[k] * (deltaT * Y - deltaTz) + T_itp77[k]
                salinity[0, :, k] = \
                    Z[k] * (deltaSy * (100.0*Y[:]) - deltaSz) + S_itp77[k]
                    # Z[k] * (deltaSy * (Y[:]) - deltaSz) + S_itp77[k]
            else:
                temperature[0, :, k] = T_itp77[k]
                salinity[0, :, k] = S_itp77[k]
        print(count)

        ds['density'] = xarray.ones_like(ds.zMid).where(ds.cellMask)
        density = ds['density']
        density[0, :, :] = linear_densityref + beta * salinity[0, :, :] - \
                alpha * temperature[0, :, :]

        # Coriolis parameter
        ds['fCell'] = (('nCells', 'nVertLevels',),
                       0.00014 * np.ones([nCells, nVertLevels]))
        ds['fEdge'] = (('nEdges', 'nVertLevels',),
                       0.00014 * np.ones([nEdges, nVertLevels]))
        ds['fVertex'] = (('nVertices', 'nVertLevels',),
                         np.zeros([nVertices, nVertLevels]))

        # initial velocity on edges
        u_cell = np.zeros([1, nCells, nVertLevels])
        u = np.zeros([1, nEdges, nVertLevels])
        v = np.zeros([1, nEdges, nVertLevels])
        drhoy = np.zeros([1, nCells])
        integral_drho = np.zeros([1, nCells])
        layerThickness = ds['layerThickness']
        deltaRhoy = beta * deltaSy - alpha * deltaT
        g = 9.81

        for k in range(nVertLevels-1, 0, -1):
            print(k)
            if (-ds.refZMid[k] < zm):
                # drhoy[0, :] = B * deltaRhoy * Z[k] * np.cos((ds.yCell - 0.5 * ny * dc)/B)
                drhoy[0, :] = deltaRhoy * Z[k] * np.cos((ds.yCell - 0.5 * ny * dc)/B)
                integral_drho[0, :] = integral_drho[0, :] + \
                    layerThickness[0, :, k] * drhoy[0, :] / density[0, :, k]
                u_cell[0, :, k] = g * integral_drho[0, :] / ds.fCell[:, k]
        for iEdge in range (0, nEdges):
            cell1 = cellsOnEdge[iEdge, 0] - 1
            cell2 = cellsOnEdge[iEdge, 1] - 1
            u[0, iEdge, :] = 0.5*(u_cell[0, cell1, :] + u_cell[0, cell2, :])
        ds['normalVelocity'] = (('Time', 'nEdges', 'nVertLevels',),
                                np.zeros([1, nEdges, nVertLevels]))
        normalVelocity = ds['normalVelocity']
        for iEdge in range(0, nEdges):
            normalVelocity[0, iEdge, :] = u[0, iEdge, :] * \
                np.cos(angleEdge[iEdge]) + v[0, iEdge, :] * np.sin(angleEdge[iEdge])

        print(f'   time: {time.time() - time1}')

        # comment('finalize and write file')
        time1 = time.time()

        # If you prefer not to have NaN as the fill value, you should consider
        # using mpas_tools.io.write_netcdf() instead
        write_netcdf(ds, 'initial_state.nc')
        print(f'   time: {time.time() - time1}')
        print(f'Total time: {time.time() - timeStart}')
